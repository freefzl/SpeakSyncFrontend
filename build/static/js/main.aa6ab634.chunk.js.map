{"version":3,"sources":["components/Home.js","components/Room.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","marginTop","spacing","padding","maxWidth","margin","form","width","submit","formControl","heading","marginBottom","features","faq","accordion","featureList","backgroundColor","palette","background","paper","borderRadius","shape","Home","classes","history","useHistory","roomId","setRoomId","useState","language","setLanguage","_jsx","Paper","className","children","_jsxs","Grid","container","item","xs","Typography","component","variant","align","color","gutterBottom","onSubmit","e","preventDefault","trim","push","TextField","required","fullWidth","label","value","onChange","target","placeholder","FormControl","InputLabel","Select","MenuItem","Button","type","List","ListItem","ListItemText","primary","secondary","Divider","Accordion","AccordionSummary","expandIcon","ExpandMoreIcon","AccordionDetails","Box","mt","textAlign","statusPaper","default","button","audioStatus","info","light","contrastText","Alert","forwardRef","props","ref","MuiAlert","elevation","CustomSnackbar","_ref","open","onClose","severity","message","Snackbar","autoHideDuration","Room","location","useLocation","pathname","split","URLSearchParams","search","get","isRecording","setIsRecording","error","setError","connectionStatus","setConnectionStatus","audioActivity","setAudioActivity","snackbarOpen","setSnackbarOpen","alertSeverity","setAlertSeverity","audioLogs","setAudioLogs","showLogs","setShowLogs","receivedChunkCounter","setReceivedChunkCounter","roomMembers","setRoomMembers","translatedText","setTranslatedText","websocketRef","useRef","mediaRecorderRef","streamRef","audioContextRef","audioQueueRef","isPlayingRef","snackbarRef","addLog","useCallback","prevLogs","time","Date","toLocaleTimeString","slice","showNotification","cleanup","current","getTracks","forEach","track","stop","close","playAudio","async","audioBlob","size","state","window","AudioContext","webkitAudioContext","resume","err","audio","Audio","url","URL","createObjectURL","src","onerror","revokeObjectURL","fallbackAudioPlay","onended","play","playError","prev","console","arrayBuffer","audioBuffer","decodeAudioData","duration","toFixed","source","createBufferSource","buffer","connect","destination","start","decodeError","connectWebSocket","wsUrl","ws","WebSocket","onopen","joinMessage","room_id","client_id","Math","random","toString","substring","send","JSON","stringify","onmessage","data","parse","event","audio_data","binaryString","atob","bytes","Uint8Array","length","i","charCodeAt","Blob","content","members_count","stack","onclose","code","setTimeout","useEffect","handleUserInteraction","addEventListener","removeEventListener","direction","alignItems","CircularProgress","onClick","stopRecording","stream","navigator","mediaDevices","getUserMedia","channelCount","sampleRate","sampleSize","echoCancellation","noiseSuppression","mediaRecorder","MediaRecorder","mimeType","audioBitsPerSecond","audioChunks","isCollecting","silenceTimeout","ondataavailable","clearTimeout","audioContext","offlineContext","_websocketRef$current","chunks","blob","byteLength","OfflineAudioContext","ceil","resampledBuffer","startRendering","pcmData","Float32Array","copyFromChannel","intData","Int16Array","blockSize","offset","end","min","s","max","binary","chunkSize","chunk","String","fromCharCode","apply","base64Data","btoa","readyState","OPEN","audioMessage","format","codec","sample_rate","channels","bits_per_sample","handleAudioChunks","disabled","style","justifyContent","map","log","index","fontFamily","includes","handleSnackbarClose","App","Router","CssBaseline","Container","Switch","Route","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa6ab634.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  Button,\n  TextField,\n  Grid,\n  Typography,\n  Paper,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  makeStyles,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n} from \"@material-ui/core\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(4),\n    padding: theme.spacing(3),\n    maxWidth: 800,\n    margin: \"0 auto\",\n  },\n  form: {\n    width: \"100%\",\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  formControl: {\n    width: \"100%\",\n  },\n  heading: {\n    marginBottom: theme.spacing(3),\n  },\n  features: {\n    marginTop: theme.spacing(4),\n  },\n  faq: {\n    marginTop: theme.spacing(4),\n  },\n  accordion: {\n    marginBottom: theme.spacing(1),\n  },\n  featureList: {\n    backgroundColor: theme.palette.background.paper,\n    borderRadius: theme.shape.borderRadius,\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst Home = () => {\n  const classes = useStyles();\n  const history = useHistory();\n  const [roomId, setRoomId] = useState(\"\");\n  const [language, setLanguage] = useState(\"en\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (roomId.trim()) {\n      history.push(`/room/${roomId}?language=${language}`);\n    }\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Typography\n            component=\"h1\"\n            variant=\"h4\"\n            align=\"center\"\n            className={classes.heading}\n          >\n            Real-time Multilingual Voice Chat Room\n          </Typography>\n\n          <Typography\n            variant=\"subtitle1\"\n            align=\"center\"\n            color=\"textSecondary\"\n            gutterBottom\n          >\n            Break language barriers with real-time voice translation in multiple\n            languages\n          </Typography>\n        </Grid>\n\n        <Grid item xs={12}>\n          <form className={classes.form} onSubmit={handleSubmit}>\n            <Grid container spacing={3}>\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  fullWidth\n                  label=\"Room ID\"\n                  value={roomId}\n                  onChange={(e) => setRoomId(e.target.value)}\n                  variant=\"outlined\"\n                  placeholder=\"Enter room ID or create a new room\"\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <FormControl variant=\"outlined\" className={classes.formControl}>\n                  <InputLabel>Select Language</InputLabel>\n                  <Select\n                    value={language}\n                    onChange={(e) => setLanguage(e.target.value)}\n                    label=\"Select Language\"\n                  >\n                    <MenuItem value=\"en\">English</MenuItem>\n                    <MenuItem value=\"zh\">Chinese</MenuItem>\n                    <MenuItem value=\"ja\">Japanese</MenuItem>\n                    <MenuItem value=\"ru\">Russian</MenuItem>\n                    <MenuItem value=\"fr\">French</MenuItem>\n                    <MenuItem value=\"de\">German</MenuItem>\n                    <MenuItem value=\"es\">Spanish</MenuItem>\n                    <MenuItem value=\"pt\">Portuguese</MenuItem>\n                    <MenuItem value=\"it\">Italian</MenuItem>\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item xs={12}>\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.submit}\n                >\n                  Join Room\n                </Button>\n              </Grid>\n            </Grid>\n          </form>\n        </Grid>\n\n        <Grid item xs={12} className={classes.features}>\n          <Typography variant=\"h5\" gutterBottom>\n            Key Features\n          </Typography>\n          <List className={classes.featureList}>\n            <ListItem>\n              <ListItemText\n                primary=\"Real-time Voice Translation\"\n                secondary=\"Instantly translate your voice into multiple languages\"\n              />\n            </ListItem>\n            <Divider />\n            <ListItem>\n              <ListItemText\n                primary=\"Multiple Language Support\"\n                secondary=\"Support for English, Chinese, Japanese, Russian, French, German, Spanish, and more\"\n              />\n            </ListItem>\n            <Divider />\n            <ListItem>\n              <ListItemText\n                primary=\"High-Quality Voice Synthesis\"\n                secondary=\"Natural-sounding voice output in target languages\"\n              />\n            </ListItem>\n            <Divider />\n            <ListItem>\n              <ListItemText\n                primary=\"Easy Room Creation\"\n                secondary=\"Create or join rooms with simple room IDs\"\n              />\n            </ListItem>\n          </List>\n        </Grid>\n\n        <Grid item xs={12} className={classes.faq}>\n          <Typography variant=\"h5\" gutterBottom>\n            Frequently Asked Questions\n          </Typography>\n          <Accordion className={classes.accordion}>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n              <Typography variant=\"subtitle1\">How does it work?</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Typography>\n                The system uses advanced speech recognition to convert your\n                voice into text, translates it into the target language, and\n                then converts it back to speech in real-time. All participants\n                in the room can hear the conversation in their chosen language.\n              </Typography>\n            </AccordionDetails>\n          </Accordion>\n\n          <Accordion className={classes.accordion}>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n              <Typography variant=\"subtitle1\">\n                Is my conversation secure?\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Typography>\n                All voice data is processed in real-time and is not stored on\n                our servers. The communication is handled through secure\n                WebSocket connections.\n              </Typography>\n            </AccordionDetails>\n          </Accordion>\n\n          <Accordion className={classes.accordion}>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n              <Typography variant=\"subtitle1\">\n                What devices are supported?\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Typography>\n                The system works on any modern web browser that supports WebRTC\n                and microphone access. This includes Chrome, Firefox, Safari,\n                and Edge on both desktop and mobile devices.\n              </Typography>\n            </AccordionDetails>\n          </Accordion>\n\n          <Accordion className={classes.accordion}>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n              <Typography variant=\"subtitle1\">\n                How many people can join a room?\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Typography>\n                Multiple users can join the same room and communicate in\n                different languages simultaneously. Each user can select their\n                preferred language for both speaking and listening.\n              </Typography>\n            </AccordionDetails>\n          </Accordion>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Box mt={4} textAlign=\"center\">\n            <Typography variant=\"body2\" color=\"textSecondary\">\n              Start breaking language barriers today with our real-time voice\n              translation technology.\n            </Typography>\n          </Box>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Home;\n","import React, {\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n  forwardRef,\n} from \"react\";\nimport {\n  Button,\n  Grid,\n  Typography,\n  CircularProgress,\n  Snackbar,\n  Paper,\n  makeStyles,\n} from \"@material-ui/core\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { useLocation } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(3),\n    marginTop: theme.spacing(3),\n  },\n  statusPaper: {\n    padding: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    backgroundColor: theme.palette.background.default,\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  audioStatus: {\n    marginTop: theme.spacing(2),\n    padding: theme.spacing(1),\n    backgroundColor: theme.palette.info.light,\n    color: theme.palette.info.contrastText,\n    borderRadius: theme.shape.borderRadius,\n  },\n}));\n\nconst Alert = forwardRef((props, ref) => (\n  <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />\n));\n\nconst CustomSnackbar = forwardRef(\n  ({ open, onClose, severity, message }, ref) => (\n    <Snackbar open={open} autoHideDuration={6000} onClose={onClose} ref={ref}>\n      <Alert onClose={onClose} severity={severity}>\n        {message}\n      </Alert>\n    </Snackbar>\n  )\n);\n\nconst Room = () => {\n  const classes = useStyles();\n  const location = useLocation();\n  const roomId = location.pathname.split(\"/\")[2] || \"\";\n  const searchParams = new URLSearchParams(location.search);\n  const language = searchParams.get(\"language\") || \"en\";\n\n  const [isRecording, setIsRecording] = useState(false);\n  const [error, setError] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState(\"disconnected\");\n  const [audioActivity, setAudioActivity] = useState(false);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [alertSeverity, setAlertSeverity] = useState(\"info\");\n  const [audioLogs, setAudioLogs] = useState([]);\n  const [showLogs, setShowLogs] = useState(true);\n  const [receivedChunkCounter, setReceivedChunkCounter] = useState(0);\n  const [roomMembers, setRoomMembers] = useState(0);\n  const [translatedText, setTranslatedText] = useState(\"\");\n\n  const websocketRef = useRef(null);\n  const mediaRecorderRef = useRef(null);\n  const streamRef = useRef(null);\n  const audioContextRef = useRef(null);\n  const audioQueueRef = useRef([]);\n  const isPlayingRef = useRef(false);\n  const snackbarRef = useRef(null);\n\n  const addLog = useCallback((message) => {\n    setAudioLogs((prevLogs) => {\n      const newLogs = [\n        ...prevLogs,\n        {\n          time: new Date().toLocaleTimeString(),\n          message,\n        },\n      ];\n      return newLogs.slice(-10);\n    });\n  }, []);\n\n  const showNotification = useCallback((message, severity) => {\n    setError(message);\n    setAlertSeverity(severity);\n    setSnackbarOpen(true);\n  }, []);\n\n  const cleanup = useCallback(() => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach((track) => track.stop());\n      addLog(\"Cleanup: Closing audio stream\");\n    }\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      addLog(\"Cleanup: Stopping recorder\");\n    }\n    if (websocketRef.current) {\n      websocketRef.current.close();\n      addLog(\"Cleanup: Closing WebSocket connection\");\n    }\n    if (audioContextRef.current) {\n      audioContextRef.current.close();\n      addLog(\"Cleanup: Closing audio context\");\n    }\n    audioQueueRef.current = [];\n    isPlayingRef.current = false;\n    setReceivedChunkCounter(0);\n  }, [addLog]);\n\n  const playAudio = useCallback(\n    async (audioBlob) => {\n      try {\n        setAudioActivity(true);\n        addLog(`Preparing to play audio data (size: ${audioBlob.size} bytes)`);\n\n        if (audioBlob.size === 0) {\n          addLog(\"Warning: Received empty audio data\");\n          setAudioActivity(false);\n          return;\n        }\n\n        // Create or restore AudioContext\n        if (\n          !audioContextRef.current ||\n          audioContextRef.current.state === \"closed\"\n        ) {\n          audioContextRef.current = new (window.AudioContext ||\n            window.webkitAudioContext)();\n          addLog(\"Created new AudioContext\");\n        }\n\n        // Try to automatically restore audio context\n        if (audioContextRef.current.state === \"suspended\") {\n          try {\n            await audioContextRef.current.resume();\n            addLog(\"Automatic audio context restoration successful\");\n          } catch (err) {\n            addLog(\n              `Automatic audio context restoration failed: ${err.message}`\n            );\n            showNotification(\n              \"Please click the page to enable audio playback\",\n              \"info\"\n            );\n          }\n        }\n\n        // Play audio directly\n        const audio = new Audio();\n        const url = URL.createObjectURL(audioBlob);\n        audio.src = url;\n\n        // Listen for errors\n        audio.onerror = (e) => {\n          addLog(`Audio load error: ${e.target.error}`);\n          setAudioActivity(false);\n          URL.revokeObjectURL(url);\n\n          // If direct playback fails, try using AudioContext to decode\n          fallbackAudioPlay(audioBlob);\n        };\n\n        // Listen for playback end\n        audio.onended = () => {\n          setAudioActivity(false);\n          URL.revokeObjectURL(url);\n          addLog(\"Audio playback completed\");\n        };\n\n        // Start playback\n        try {\n          await audio.play();\n          addLog(\"Starting audio playback\");\n        } catch (playError) {\n          addLog(\n            `Direct playback failed, trying fallback: ${playError.message}`\n          );\n          URL.revokeObjectURL(url);\n          await fallbackAudioPlay(audioBlob);\n        }\n\n        setReceivedChunkCounter((prev) => prev + 1);\n      } catch (err) {\n        console.error(\"Audio playback failed:\", err);\n        setAudioActivity(false);\n        addLog(`Audio playback failed: ${err.message}`);\n        showNotification(\n          \"Audio playback error, trying to restore...\",\n          \"warning\"\n        );\n      }\n    },\n    [addLog, showNotification]\n  );\n\n  // Fallback audio playback method\n  const fallbackAudioPlay = async (audioBlob) => {\n    try {\n      addLog(\"Using fallback to play audio\");\n\n      // Ensure AudioContext is available\n      if (\n        !audioContextRef.current ||\n        audioContextRef.current.state === \"closed\"\n      ) {\n        audioContextRef.current = new (window.AudioContext ||\n          window.webkitAudioContext)();\n      }\n\n      if (audioContextRef.current.state === \"suspended\") {\n        await audioContextRef.current.resume();\n      }\n\n      // Read audio data\n      const arrayBuffer = await audioBlob.arrayBuffer();\n\n      // Try to decode\n      try {\n        const audioBuffer = await audioContextRef.current.decodeAudioData(\n          arrayBuffer\n        );\n        addLog(\n          `Audio decoding successful: ${audioBuffer.duration.toFixed(\n            2\n          )} seconds`\n        );\n\n        const source = audioContextRef.current.createBufferSource();\n        source.buffer = audioBuffer;\n        source.connect(audioContextRef.current.destination);\n\n        source.onended = () => {\n          setAudioActivity(false);\n          addLog(\"Fallback playback completed\");\n        };\n\n        source.start(0);\n        addLog(\"Fallback playback started\");\n      } catch (decodeError) {\n        addLog(`Audio decoding failed: ${decodeError.message}`);\n        throw decodeError;\n      }\n    } catch (error) {\n      addLog(`Fallback playback failed: ${error.message}`);\n      setAudioActivity(false);\n      showNotification(\"Audio playback failed\", \"error\");\n    }\n  };\n\n  const handleAudioChunks = async (chunks) => {\n    let audioContext = null;\n    let offlineContext = null;\n\n    try {\n      addLog(`Starting to process audio data chunks: ${chunks.length} chunks`);\n      const blob = new Blob(chunks, { type: \"audio/webm;codecs=opus\" });\n      addLog(`Created Blob: ${blob.size} bytes, type: ${blob.type}`);\n\n      if (blob.size === 0) {\n        addLog(\"Warning: Audio data is empty\");\n        return;\n      }\n\n      const arrayBuffer = await blob.arrayBuffer();\n      addLog(`Converted to ArrayBuffer: ${arrayBuffer.byteLength} bytes`);\n\n      // Create new AudioContext\n      audioContext = new (window.AudioContext || window.webkitAudioContext)({\n        sampleRate: 16000,\n      });\n\n      // Decode audio data\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      addLog(\n        `Decoded audio data: Duration ${audioBuffer.duration.toFixed(\n          2\n        )} seconds, Sample Rate ${audioBuffer.sampleRate}Hz`\n      );\n\n      // Resample to 16kHz mono\n      offlineContext = new OfflineAudioContext(\n        1,\n        Math.ceil(audioBuffer.duration * 16000),\n        16000\n      );\n      const source = offlineContext.createBufferSource();\n      source.buffer = audioBuffer;\n      source.connect(offlineContext.destination);\n      source.start();\n\n      const resampledBuffer = await offlineContext.startRendering();\n      addLog(`Resampling completed: ${resampledBuffer.length} samples`);\n\n      // Convert to 16-bit PCM\n      const pcmData = new Float32Array(resampledBuffer.length);\n      resampledBuffer.copyFromChannel(pcmData, 0);\n\n      const intData = new Int16Array(pcmData.length);\n      const blockSize = 1024;\n\n      for (let offset = 0; offset < pcmData.length; offset += blockSize) {\n        const end = Math.min(offset + blockSize, pcmData.length);\n        for (let i = offset; i < end; i++) {\n          const s = Math.max(-1, Math.min(1, pcmData[i]));\n          intData[i] = s < 0 ? s * 0x8000 : s * 0x7fff;\n        }\n      }\n\n      // Use a more efficient Base64 conversion method\n      const buffer = intData.buffer;\n      const bytes = new Uint8Array(buffer);\n      let binary = \"\";\n      const chunkSize = 1024;\n\n      for (let i = 0; i < bytes.length; i += chunkSize) {\n        const chunk = bytes.slice(i, i + chunkSize);\n        binary += String.fromCharCode.apply(null, chunk);\n      }\n\n      const base64Data = btoa(binary);\n      addLog(`Converted to Base64: ${base64Data.length} characters`);\n\n      if (websocketRef.current?.readyState === WebSocket.OPEN) {\n        const audioMessage = {\n          type: \"audio\",\n          room_id: roomId,\n          language: language,\n          audio_data: base64Data,\n          format: \"pcm\",\n          codec: \"pcm\",\n          sample_rate: 16000,\n          channels: 1,\n          bits_per_sample: 16,\n        };\n\n        addLog(\n          `Preparing to send audio message: ${JSON.stringify({\n            ...audioMessage,\n            audio_data: `[${base64Data.length} bytes]`,\n          })}`\n        );\n\n        websocketRef.current.send(JSON.stringify(audioMessage));\n        addLog(`Sent audio data: ${buffer.byteLength} bytes`);\n      } else {\n        addLog(\n          `WebSocket not connected, current status: ${\n            websocketRef.current\n              ? [\"CONNECTING\", \"OPEN\", \"CLOSING\", \"CLOSED\"][\n                  websocketRef.current.readyState\n                ]\n              : \"Not initialized\"\n          }`\n        );\n      }\n    } catch (err) {\n      addLog(`Audio processing error: ${err.message}\\n${err.stack}`);\n      console.error(\"Audio processing error:\", err);\n    } finally {\n      // Clean up resources\n      if (audioContext) {\n        try {\n          await audioContext.close();\n        } catch (err) {\n          addLog(`Error closing AudioContext: ${err.message}`);\n        }\n      }\n    }\n  };\n\n  const startRecording = async () => {\n    try {\n      addLog(\"Starting recording initialization...\");\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: {\n          channelCount: 1,\n          sampleRate: 16000,\n          sampleSize: 16,\n          echoCancellation: true,\n          noiseSuppression: true,\n        },\n      });\n      streamRef.current = stream;\n      addLog(\"Successfully obtained microphone permission\");\n\n      const mediaRecorder = new MediaRecorder(stream, {\n        mimeType: \"audio/webm;codecs=opus\",\n        audioBitsPerSecond: 16000,\n      });\n\n      mediaRecorderRef.current = mediaRecorder;\n      addLog(\"MediaRecorder initialization successful\");\n\n      let audioChunks = [];\n      let isCollecting = false;\n      let silenceTimeout = null;\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunks.push(event.data);\n          addLog(`Received audio data chunk: ${event.data.size} bytes`);\n\n          if (!isCollecting) {\n            isCollecting = true;\n            addLog(\"Starting to collect audio data\");\n          }\n\n          // Reset silence timeout\n          if (silenceTimeout) {\n            clearTimeout(silenceTimeout);\n          }\n\n          // Set new silence timeout\n          silenceTimeout = setTimeout(() => {\n            if (audioChunks.length > 0) {\n              addLog(\n                `Preparing to process audio data: ${audioChunks.length} chunks`\n              );\n              handleAudioChunks([...audioChunks]);\n              audioChunks = [];\n              isCollecting = false;\n            }\n          }, 500);\n        }\n      };\n\n      mediaRecorder.start(100);\n      setIsRecording(true);\n      addLog(\"Starting recording\");\n      showNotification(\"Starting recording\", \"info\");\n    } catch (err) {\n      console.error(\"Recording error:\", err);\n      setError(\"Microphone access failed\");\n      addLog(`Recording error: ${err.message}`);\n      showNotification(\"Microphone access failed\", \"error\");\n    }\n  };\n\n  const stopRecording = () => {\n    if (\n      mediaRecorderRef.current &&\n      mediaRecorderRef.current.state === \"recording\"\n    ) {\n      mediaRecorderRef.current.stop();\n      addLog(\"Stopped recording\");\n    }\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach((track) => track.stop());\n      addLog(\"Closed audio stream\");\n    }\n    setIsRecording(false);\n    showNotification(\"Stopped recording\", \"info\");\n  };\n\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n\n  const connectWebSocket = useCallback(() => {\n    if (!roomId) {\n      setError(\"Please enter Room ID\");\n      setConnectionStatus(\"error\");\n      addLog(\"Error: Room ID not provided\");\n      return;\n    }\n\n    try {\n      setConnectionStatus(\"connecting\");\n      addLog(\"Connecting WebSocket...\");\n\n      const wsUrl = `ws://18.188.212.216:8000/ws/${roomId}?language=${language}`;\n      addLog(`Connecting WebSocket: ${wsUrl}`);\n\n      const ws = new WebSocket(wsUrl);\n      websocketRef.current = ws;\n\n      ws.onopen = () => {\n        setConnectionStatus(\"connected\");\n        showNotification(\"Connected to chat room\", \"success\");\n        addLog(\"WebSocket connection successful\");\n\n        // Send join room message\n        const joinMessage = {\n          type: \"join\",\n          room_id: roomId,\n          language: language,\n          client_id: Math.random().toString(36).substring(7),\n        };\n        ws.send(JSON.stringify(joinMessage));\n        addLog(`Sent join room message: ${JSON.stringify(joinMessage)}`);\n      };\n\n      ws.onmessage = async (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          addLog(`Received message type: ${data.type}`);\n\n          switch (data.type) {\n            case \"audio\":\n              try {\n                if (!data.audio_data) {\n                  addLog(\"Warning: Received empty audio data\");\n                  return;\n                }\n\n                // Decode Base64 audio data\n                const binaryString = atob(data.audio_data);\n                const bytes = new Uint8Array(binaryString.length);\n                for (let i = 0; i < binaryString.length; i++) {\n                  bytes[i] = binaryString.charCodeAt(i);\n                }\n\n                // Create audio Blob, note here we use mp3 format\n                const audioBlob = new Blob([bytes.buffer], {\n                  type: \"audio/mp3\",\n                });\n                addLog(`Created audio Blob: ${audioBlob.size} bytes`);\n\n                if (audioBlob.size > 0) {\n                  await playAudio(audioBlob);\n                } else {\n                  addLog(\"Warning: Generated audio Blob is empty\");\n                }\n              } catch (err) {\n                addLog(`Audio data processing error: ${err.message}`);\n              }\n              break;\n\n            case \"text\":\n              setTranslatedText(data.content);\n              addLog(`Received translation text: ${data.content}`);\n              break;\n\n            case \"room_info\":\n              setRoomMembers(data.members_count);\n              addLog(`Room member count updated: ${data.members_count}`);\n              break;\n\n            case \"error\":\n              addLog(`Received error message: ${data.message}`);\n              showNotification(data.message, \"error\");\n              break;\n\n            default:\n              addLog(`Received unknown type message: ${data.type}`);\n          }\n        } catch (err) {\n          addLog(`Error processing message: ${err.message}\\n${err.stack}`);\n          console.error(\"Message processing error:\", err);\n        }\n      };\n\n      ws.onerror = (error) => {\n        console.error(\"WebSocket error:\", error);\n        setError(\"WebSocket connection error\");\n        setConnectionStatus(\"error\");\n        showNotification(\"Connection error\", \"error\");\n        addLog(`WebSocket error: ${error.message || \"Unknown error\"}`);\n      };\n\n      ws.onclose = (event) => {\n        setConnectionStatus(\"disconnected\");\n        showNotification(\"Connection closed\", \"warning\");\n        addLog(`WebSocket connection closed (code: ${event.code})`);\n        setReceivedChunkCounter(0);\n\n        // Try to reconnect\n        setTimeout(() => {\n          if (event.code !== 1000) {\n            addLog(\"Trying to reconnect...\");\n            connectWebSocket();\n          }\n        }, 3000);\n      };\n    } catch (err) {\n      console.error(\"Connection error:\", err);\n      setError(\"Connection error\");\n      setConnectionStatus(\"error\");\n      addLog(`Connection error: ${err.message}\\n${err.stack}`);\n    }\n  }, [roomId, language, showNotification, playAudio, addLog]);\n\n  useEffect(() => {\n    if (roomId) {\n      connectWebSocket();\n    }\n    return cleanup;\n  }, [connectWebSocket, cleanup, roomId]);\n\n  useEffect(() => {\n    // Add user interaction event listener to lift audio playback restriction\n    const handleUserInteraction = async () => {\n      if (\n        audioContextRef.current &&\n        audioContextRef.current.state === \"suspended\"\n      ) {\n        await audioContextRef.current.resume();\n        addLog(\"Lifted audio context restriction through user interaction\");\n      }\n    };\n\n    window.addEventListener(\"click\", handleUserInteraction);\n    window.addEventListener(\"touchstart\", handleUserInteraction);\n\n    return () => {\n      window.removeEventListener(\"click\", handleUserInteraction);\n      window.removeEventListener(\"touchstart\", handleUserInteraction);\n    };\n  }, [addLog]);\n\n  return (\n    <Grid container spacing={2} direction=\"column\" alignItems=\"center\">\n      <Paper className={classes.root}>\n        <Grid item>\n          <Typography variant=\"h4\" gutterBottom>\n            Room: {roomId || \"Please enter Room ID in URL\"}\n          </Typography>\n        </Grid>\n\n        <Grid item>\n          <Typography variant=\"body1\" gutterBottom>\n            Current Language: {language}\n          </Typography>\n        </Grid>\n\n        <Paper className={classes.statusPaper}>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item>\n              <Typography variant=\"body2\">\n                Status: {!roomId ? \"Waiting for Room ID\" : connectionStatus}\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Current Members: {roomMembers}\n              </Typography>\n            </Grid>\n            <Grid item>\n              {connectionStatus === \"connecting\" && (\n                <CircularProgress size={20} />\n              )}\n            </Grid>\n          </Grid>\n        </Paper>\n\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            color={isRecording ? \"secondary\" : \"primary\"}\n            onClick={isRecording ? stopRecording : startRecording}\n            className={classes.button}\n            disabled={!roomId || connectionStatus !== \"connected\"}\n          >\n            {isRecording ? \"Stop Speaking\" : \"Start Speaking\"}\n          </Button>\n        </Grid>\n\n        {audioActivity && (\n          <div className={classes.audioStatus}>\n            <Typography variant=\"body2\" align=\"center\">\n              Receiving audio...\n            </Typography>\n          </div>\n        )}\n\n        {translatedText && (\n          <div className={classes.audioStatus}>\n            <Typography variant=\"body2\" align=\"center\">\n              Translation: {translatedText}\n            </Typography>\n          </div>\n        )}\n\n        {showLogs && (\n          <Paper className={classes.statusPaper} style={{ marginTop: \"20px\" }}>\n            <Grid container direction=\"column\" spacing={1}>\n              <Grid\n                item\n                container\n                justifyContent=\"space-between\"\n                alignItems=\"center\"\n              >\n                <Typography variant=\"h6\">\n                  {language === \"zh\" ? \"Sending\" : \"Receiving\"} Logs\n                  {receivedChunkCounter > 0 &&\n                    language !== \"zh\" &&\n                    ` (Received ${receivedChunkCounter} chunks)`}\n                </Typography>\n                <Button\n                  size=\"small\"\n                  onClick={() => setShowLogs(false)}\n                  variant=\"outlined\"\n                >\n                  Hide Logs\n                </Button>\n              </Grid>\n              {audioLogs.map((log, index) => (\n                <Grid item key={index}>\n                  <Typography\n                    variant=\"body2\"\n                    style={{\n                      fontFamily: \"monospace\",\n                      color: log.message.includes(\"error\")\n                        ? \"#f44336\"\n                        : log.message.includes(\"success\")\n                        ? \"#4caf50\"\n                        : \"inherit\",\n                    }}\n                  >\n                    [{log.time}] {log.message}\n                  </Typography>\n                </Grid>\n              ))}\n            </Grid>\n          </Paper>\n        )}\n\n        {!showLogs && (\n          <Button\n            size=\"small\"\n            onClick={() => setShowLogs(true)}\n            variant=\"outlined\"\n            style={{ marginTop: \"20px\" }}\n          >\n            Show Logs\n          </Button>\n        )}\n      </Paper>\n\n      <CustomSnackbar\n        ref={snackbarRef}\n        open={snackbarOpen}\n        onClose={handleSnackbarClose}\n        severity={alertSeverity}\n        message={error}\n      />\n    </Grid>\n  );\n};\n\nexport default Room;\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { Container, CssBaseline } from \"@material-ui/core\";\r\nimport Home from \"./components/Home\";\r\nimport Room from \"./components/Room\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"md\">\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route path=\"/room/:roomId\" component={Room} />\r\n        </Switch>\r\n      </Container>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}